Count|Prep|Prep Avg|Query|Query Avg|Get|Get Avg|Total|Total Avg|CMD
151|541812277|3588160|729306267|4829842|28024090|185590|1299142634|8603593| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=?
4|84236744|21059186|129967946|32491986|840069|210017|215044759|53761189| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)       UNION -- Adding another OR       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
11|40475622|3679602|42220725|3838247|202832|18439|82899179|7536289| 	    SELECT EXISTS(SELECT 1 FROM FullTree 		WHERE RegSID=? AND Type=3 AND 		  Path LIKE 'dirs/d1/%' AND 		  PropName='readonly,' AND 		  PropValue='true')
1|19604224|19604224|31547591|31547591|111795|111795|51263610|51263610| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ?) AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           -- Entities that don't have the specified prop           SELECT e.eSID,e.Type,e.Path FROM Entities AS e           WHERE e.RegSID=? AND e.Abstract=? AND             NOT EXISTS (SELECT 1 FROM FullTree WHERE               RegSID=e.RegSID AND eSID=e.eSID AND (BINARY PropName=? AND PropValue=?))           UNION ALL           SELECT eSID,Type,Path FROM FullTree WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue IS NOT NULL)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
1|3621747|3621747|3595702|3595702|22596|22596|7240045|7240045| 	    SELECT EXISTS(SELECT 1 FROM FullTree 		WHERE RegSID=? AND Type=3 AND 		  Path LIKE 'dirs/d5/%' AND 		  PropName='readonly,' AND 		  PropValue='true')
419|240488482|573958|232817600|555650|10694618|25524|484000700|1155132| 		SELECT             e.RegSID as RegSID,             e.Type as Type,             e.Plural as Plural,             e.Singular as Singular,             e.eSID as eSID,             e.UID as UID,             p.PropName as PropName,             p.PropValue as PropValue,             p.PropType as PropType,             e.Path as Path,             e.Abstract as Abstract         FROM Entities AS e         LEFT JOIN Props AS p ON (e.eSID=p.EntitySID)         WHERE e.RegSID=? AND (Abstract=? OR Abstract=?)  ORDER BY Path
423|1574885823|3723134|2349865766|5555238|50419955|119196|3975171544|9397568| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ?)
55|201137700|3657049|305086355|5547024|3071892|55852|509295947|9259926| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND Path=? ORDER BY Path
42|164517309|3917078|222811743|5305041|3391879|80759|390720931|9302879| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND DocView=true AND (Path=? OR Path LIKE ?)
31|16762270|540718|14009729|451926|740547|23888|31512546|1016533| 		SELECT             e.RegSID as RegSID,             e.Type as Type,             e.Plural as Plural,             e.Singular as Singular,             e.eSID as eSID,             e.UID as UID,             p.PropName as PropName,             p.PropValue as PropValue,             p.PropType as PropType,             e.Path as Path,             e.Abstract as Abstract         FROM Entities AS e         LEFT JOIN Props AS p ON (e.eSID=p.EntitySID)         WHERE e.RegSID=? AND (ParentSID=? AND Type=?)  ORDER BY Path
1|12389618|12389618|22122259|22122259|106985|106985|34618862|34618862| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ?) AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           -- Entities that don't have the specified prop           SELECT e.eSID,e.Type,e.Path FROM Entities AS e           WHERE e.RegSID=? AND e.Abstract=? AND             NOT EXISTS (SELECT 1 FROM FullTree WHERE               RegSID=e.RegSID AND eSID=e.eSID AND (BINARY PropName=?))           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
1|1046476|1046476|855750|855750|39396|39396|1941622|1941622|SELECT e.Path,p.PropName,p.PropValue FROM Props AS p JOIN Entities AS e ON (p.EntitySID=e.eSID) WHERE p.RegistrySID=? ORDER BY Path, PropName 
3|11268658|3756219|18672172|6224057|570325|190108|30511155|10170385| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ? OR Path=? OR Path LIKE ? OR Path=? OR Path LIKE ?)
2|7492782|3746391|7318298|3659149|45125|22562|14856205|7428102| 	    SELECT EXISTS(SELECT 1 FROM FullTree 		WHERE RegSID=? AND Type=3 AND 		  Path LIKE 'dirs/d4/%' AND 		  PropName='readonly,' AND 		  PropValue='true')
231|42684884|184783|47938465|207525|1780119|7706|92403468|400015| 	   	SELECT SID 	   	FROM Registries 	   	WHERE UID=?
425|91054188|214245|113382615|266782|3860690|9083|208297493|490111|             SELECT VersionUID, Ancestor, Pos FROM VersionAncestors 			WHERE RegistrySID=? AND ResourceSID=? 			ORDER BY Pos ASC, Time ASC, VersionUID ASC
81|300755970|3713036|455778054|5626889|11682534|144228|768216558|9484155| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ?) ORDER BY Path
20|75620774|3781038|95203082|4760154|2544083|127204|173367939|8668396| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND DocView=true
1|11963927|11963927|19370666|19370666|255381|255381|31589974|31589974| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ?) AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND ((PropType<>'string' AND PropValue=?)  OR (PropType='string' AND PropValue LIKE ?)))           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
2|24207169|12103584|39159671|19579835|377014|188507|63743854|31871927| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ?) AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue IS NOT NULL)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
2|8704439|4352219|12086735|6043367|462829|231414|21254003|10627001| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ? OR Path=? OR Path LIKE ? OR Path=? OR Path LIKE ? OR Path=? OR Path LIKE ?)
1|20944071|20944071|35373791|35373791|257041|257041|56574903|56574903| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ?) AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           -- Entities that don't have the specified prop           SELECT e.eSID,e.Type,e.Path FROM Entities AS e           WHERE e.RegSID=? AND e.Abstract=? AND             NOT EXISTS (SELECT 1 FROM FullTree WHERE               RegSID=e.RegSID AND eSID=e.eSID AND (BINARY PropName=? AND PropValue=?))           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)       UNION -- Adding another OR       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue IS NOT NULL)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
245|50635163|206674|51294882|209366|6000543|24492|107930588|440533|         SELECT PropName, PropValue, PropType         FROM Props WHERE EntitySID=? 
1278|694888864|543731|755834414|591419|23108716|18081|1473831994|1153233| 		SELECT             e.RegSID as RegSID,             e.Type as Type,             e.Plural as Plural,             e.Singular as Singular,             e.eSID as eSID,             e.UID as UID,             p.PropName as PropName,             p.PropValue as PropValue,             p.PropType as PropType,             e.Path as Path,             e.Abstract as Abstract         FROM Entities AS e         LEFT JOIN Props AS p ON (e.eSID=p.EntitySID)         WHERE e.RegSID=? AND e.Path COLLATE utf8mb4_0900_ai_ci=? ORDER BY Path
211|61739874|292606|55708093|264019|2497534|11836|119945501|568462|             SELECT Content FROM ResourceContents WHERE VersionSID=? 
4|50446050|12611512|77455545|19363886|403496|100874|128305091|32076272| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND DocView=true AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
15|187061912|12470794|232093284|15472885|3610955|240730|422766151|28184410| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue IS NOT NULL)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
3|104259033|34753011|161307353|53769117|523967|174655|266090353|88696784| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           UNION ALL           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)       UNION -- Adding another OR       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           UNION ALL           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
1|19349362|19349362|32876678|32876678|121604|121604|52347644|52347644| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           -- Entities that don't have the specified prop           SELECT e.eSID,e.Type,e.Path FROM Entities AS e           WHERE e.RegSID=? AND e.Abstract=? AND             NOT EXISTS (SELECT 1 FROM FullTree WHERE               RegSID=e.RegSID AND eSID=e.eSID AND (BINARY PropName=? AND PropValue=?))           UNION ALL           SELECT eSID,Type,Path FROM FullTree WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue IS NOT NULL)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
1474|291889946|198025|394156567|267406|39536312|26822|725582825|492254|         SELECT             SID, RegistrySID, ParentSID, Plural, Singular, Attributes, 			MaxVersions, SetVersionId, SetDefaultSticky, HasDocument, 			TypeMap, Labels, MetaAttributes, ModelVersion, CompatibleWith, 			Description         FROM ModelEntities         WHERE RegistrySID=?         ORDER BY ParentSID ASC
15|56163918|3744261|86155853|5743723|2286205|152413|144605976|9640398| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ? OR Path=? OR Path LIKE ?)
14|7407248|529089|7657357|546954|104278|7448|15168883|1083491| 			SELECT UID 			FROM Entities 			WHERE RegSID=? AND Abstract=?
90|62954575|699495|88743373|986037|1113228|12369|152811176|1697901| 			SELECT v.UID,p.PropValue FROM Versions AS v 			JOIN EffectiveProps as p 			  ON (p.EntitySID=v.SID AND 			      p.PropName='createdat,') 			WHERE v.RegistrySID=? AND v.ResourceSID=? 			  ORDER BY p.PropValue ASC, v.UID ASC
2|38035535|19017767|61441916|30720958|140707|70353|99618158|49809079| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND DocView=true AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           UNION ALL           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
20|243598928|12179946|381227448|19061372|3270106|163505|628096482|31404824| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
14|170774073|12198148|274658249|19618446|1073513|76679|446505835|31893273| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ?) AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
2|38269377|19134688|56705240|28352620|251617|125808|95226234|47613117| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           UNION ALL           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
3|42728977|14242992|52641796|17547265|369047|123015|95739820|31913273| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           -- Entities that don't have the specified prop           SELECT e.eSID,e.Type,e.Path FROM Entities AS e           WHERE e.RegSID=? AND e.Abstract=? AND             NOT EXISTS (SELECT 1 FROM FullTree WHERE               RegSID=e.RegSID AND eSID=e.eSID AND (BINARY PropName=? AND PropValue=?))           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
6|77154582|12859097|95117802|15852967|452150|75358|172724534|28787422| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           -- Entities that don't have the specified prop           SELECT e.eSID,e.Type,e.Path FROM Entities AS e           WHERE e.RegSID=? AND e.Abstract=? AND             NOT EXISTS (SELECT 1 FROM FullTree WHERE               RegSID=e.RegSID AND eSID=e.eSID AND (BINARY PropName=?))           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
2|7295683|3647841|7087997|3543998|25082|12541|14408762|7204381| 	    SELECT EXISTS(SELECT 1 FROM FullTree 		WHERE RegSID=? AND Type=3 AND 		  Path LIKE 'dirs/d3/%' AND 		  PropName='readonly,' AND 		  PropValue='true')
4|2137212|534303|1253244|313311|82400|20600|3472856|868214|select * from Versions where ResourceSID=?
1|12597088|12597088|22330530|22330530|187668|187668|35115286|35115286| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND (Path=? OR Path LIKE ?) AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           -- Entities that don't have the specified prop           SELECT e.eSID,e.Type,e.Path FROM Entities AS e           WHERE e.RegSID=? AND e.Abstract=? AND             NOT EXISTS (SELECT 1 FROM FullTree WHERE               RegSID=e.RegSID AND eSID=e.eSID AND (BINARY PropName=? AND PropValue=?))           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
1|3742672|3742672|3958851|3958851|32777|32777|7734300|7734300| 	    SELECT EXISTS(SELECT 1 FROM FullTree 		WHERE RegSID=? AND Type=3 AND 		  Path LIKE 'dirs/dir1/%' AND 		  PropName='readonly,' AND 		  PropValue='true')
3122|1856517327|594656|1990877571|637693|82603933|26458|3929998831|1258808| 		SELECT             e.RegSID as RegSID,             e.Type as Type,             e.Plural as Plural,             e.Singular as Singular,             e.eSID as eSID,             e.UID as UID,             p.PropName as PropName,             p.PropValue as PropValue,             p.PropType as PropType,             e.Path as Path,             e.Abstract as Abstract         FROM Entities AS e         LEFT JOIN Props AS p ON (e.eSID=p.EntitySID)         WHERE e.RegSID=? AND e.Path=? ORDER BY Path
1474|299008405|202855|340159089|230772|16466095|11171|655633589|444798|SELECT Labels, Attributes FROM Models WHERE RegistrySID=?
3|39226210|13075403|59272884|19757628|308689|102896|98807783|32935927| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND DocView=true AND (Path=? OR Path LIKE ?) AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue=?)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
20|241998803|12099940|386432524|19321626|4960342|248017|633391669|31669583| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree             WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND ((PropType<>'string' AND PropValue=?)  OR (PropType='string' AND PropValue LIKE ?)))           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
1|21543572|21543572|35509389|35509389|298525|298525|57351486|57351486| SELECT   RegSID,Type,Plural,Singular,eSID,UID,PropName,PropValue,PropType,Path,Abstract FROM FullTree WHERE RegSID=? AND ( eSID IN ( -- eSID from query   -- Find all entities that match the filters, and then grab all parents   -- This "RECURSIVE" stuff finds all parents   WITH RECURSIVE cte(eSID,Type,ParentSID,Path) AS (     -- This defines the init set of rows of the query. We'll recurse later on     SELECT eSID,Type,ParentSID,Path FROM Entities     WHERE eSID in ( -- start of the OR Filter groupings       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           -- Entities that don't have the specified prop           SELECT e.eSID,e.Type,e.Path FROM Entities AS e           WHERE e.RegSID=? AND e.Abstract=? AND             NOT EXISTS (SELECT 1 FROM FullTree WHERE               RegSID=e.RegSID AND eSID=e.eSID AND (BINARY PropName=? AND PropValue=?))           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)       UNION -- Adding another OR       -- start of one Filter AND grouping (expr1 AND expr2).       -- Find all SIDs for the leaves for entities (SIDs) of interest.       SELECT list.eSID FROM (         SELECT count(*) as cnt,e2.eSID,e2.Path FROM Entities AS e1         RIGHT JOIN (           -- start of expr1 - below finds SearchNodes/SIDs of interest           SELECT eSID,Type,Path FROM FullTree WHERE RegSID=? AND (BINARY Abstract=? AND PropName=? AND PropValue IS NOT NULL)           -- end of expr1         ) AS result ON ( result.eSID=e1.eSID )         -- For each result found, find all Leaves under the matching entity.         -- The Leaves that show up 'cnt' times, where cnt is the # of         -- expressions in each filter (the ANDs), are branches to return.         -- Note we return the Path of each Leaf, not the path of the matching         -- entity. The entity that matches isn't important.         JOIN Entities AS e2 ON (           (             (               -- Non-meta objects, just compare the Path               result.Type<>3 AND               ( e2.Path=result.Path OR                 e2.Path LIKE CONCAT(IF(result.Path<>'',CONCAT(result.Path,'/'),''),'%')               )             )             OR             (               -- For 'meta' objects, compare it's parent's Path               result.Type=3 AND               ( e2.Path=TRIM(TRAILING '/meta' FROM result.Path) OR                 e2.Path LIKE CONCAT(TRIM(TRAILING 'meta' FROM result.Path),'%')               )             )           )           AND e2.eSID IN (SELECT * from Leaves)         ) GROUP BY e2.eSID         -- end of RIGHT JOIN       ) as list       WHERE list.cnt=?   -- cnt is the # of operands in the AND filter       -- end of one Filter AND grouping (expr1 AND expr2 ...)     ) -- end of all OR Filter groupings      -- This is the recusive part of the query.     -- Find all of the parents (and 'meta' sub-objects) of the found     -- entities, up to root of Reg.     UNION DISTINCT SELECT       e.eSID,e.Type,e.ParentSID,e.Path     FROM Entities AS e     INNER JOIN cte ON       (         -- Find its parent         e.eSID=cte.ParentSID         OR         -- If this is a Resource, grab its 'meta' sub-object         ( cte.Type=2 AND           e.Type=3 AND           e.ParentSID=cte.eSID         )       )   )   SELECT DISTINCT eSID FROM cte ) ) ORDER BY Path ; 
3|11128090|3709363|10006579|3335526|67140|22380|21201809|7067269| 	    SELECT EXISTS(SELECT 1 FROM FullTree 		WHERE RegSID=? AND Type=3 AND 		  Path LIKE 'dirs/d2/%' AND 		  PropName='readonly,' AND 		  PropValue='true')
