package main

import (
	"strings"
	"testing"
)

func TestPrettyPrint(t *testing.T) {
	tests := []struct {
		indent   string
		prefix   string
		line     string
		expected string
	}{
		{line: "", expected: "\n"},
		{line: "\n", expected: "\n\n"},
		{line: " \n", expected: "\n\n"},
		{line: "\n\n", expected: "\n\n\n"},
		{line: "1\n2", expected: "1\n2\n"},
		{line: "123456789012345678901234567890123456789012345678901234567890123456789012345678", expected: "123456789012345678901234567890123456789012345678901234567890123456789012345678\n"},
		{line: "1234567890123456789012345678901234567890123456789012345678901234567890123456789", expected: "1234567890123456789012345678901234567890123456789012345678901234567890123456789\n"},
		{line: "12345678901234567890123456789012345678901234567890123456789012345678901234567890", expected: "1234567890123456789012345678901234567890123456789012345678901234567890123456789\n0\n"},
		{line: "1234567890123456789012345678901234567890123456789012345678901234567890123456789 0", expected: "1234567890123456789012345678901234567890123456789012345678901234567890123456789\n0\n"},
		{line: "123456789012345678901234567890123456789012345678901234567890123456789012345678 90", expected: "123456789012345678901234567890123456789012345678901234567890123456789012345678\n90\n"},
		{line: "123456789012345678901234567890123456789012345678901234567890123456789012345678  90", expected: "123456789012345678901234567890123456789012345678901234567890123456789012345678\n90\n"},
		{line: "123456789012345678901234567890123456789012345678901234567890123456789012345678  9 0", expected: "123456789012345678901234567890123456789012345678901234567890123456789012345678\n9 0\n"},
		{line: "1234567890123456789012345678901234567890123456789012345678901234567890123456789 0", expected: "1234567890123456789012345678901234567890123456789012345678901234567890123456789\n0\n"},
		{line: "123456789012345678901234567890123456789012345678901234567890123456789012345 6789 0", expected: "123456789012345678901234567890123456789012345678901234567890123456789012345\n6789 0\n"},
		{line: " 12345678901234567890123456789012345678901234567890123456789012345678901234567890", expected: "\n1234567890123456789012345678901234567890123456789012345678901234567890123456789\n0\n"},
		{line: "\n12345678901234567890123456789012345678901234567890123456789012345678901234567890", expected: "\n1234567890123456789012345678901234567890123456789012345678901234567890123456789\n0\n"},
		{line: "  \n  12345678901234567890123456789012345678901234567890123456789012345678901234567890", expected: "\n\n1234567890123456789012345678901234567890123456789012345678901234567890123456789\n0\n"},
		{line: "  \n  1 2345678901234567890123456789012345678901234567890123456789012345678901234567890123", expected: "\n  1\n2345678901234567890123456789012345678901234567890123456789012345678901234567890\n123\n"},
		{line: "123456789012345678901234567890123456789012345678901234567890123456789012345678\n90123", expected: "123456789012345678901234567890123456789012345678901234567890123456789012345678\n90123\n"},
		{line: "1234567890123456789012345678901234567890123456789012345678901234567890123456789\n0123", expected: "1234567890123456789012345678901234567890123456789012345678901234567890123456789\n0123\n"},
		{line: "12345678901234567890123456789012345678901234567890123456789012345678901234567890\n123", expected: "1234567890123456789012345678901234567890123456789012345678901234567890123456789\n0\n123\n"},

		{
			indent:   "ab",
			prefix:   "cd",
			line:     "  \n  1 2345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "abcd\nab    1\nab  234567890123456789012345678901234567890123456789012345678901234567890123456\nab  7890123\n",
		},
		{
			indent:   "ab",
			prefix:   "",
			line:     "  \n  1 2345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "ab\nab  1\nab23456789012345678901234567890123456789012345678901234567890123456789012345678\nab90123\n",
		},
		{
			indent:   "",
			prefix:   "cd",
			line:     "  \n  1 2345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "cd\n    1\n  23456789012345678901234567890123456789012345678901234567890123456789012345678\n  90123\n",
		},
		{
			indent:   "  ",
			prefix:   "cd",
			line:     "12345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "  cd123456789012345678901234567890123456789012345678901234567890123456789012345\n    67890123\n",
		},
		{
			indent:   "  ",
			prefix:   "cd",
			line:     "12345678901234567890123456789012345678901234567890123456789012345678901234 567890123",
			expected: "  cd12345678901234567890123456789012345678901234567890123456789012345678901234\n    567890123\n",
		},
		{
			indent:   "  ",
			prefix:   "cd",
			line:     "123456789012345678901234567890123456789012345678901234567890123456789012345 67890123",
			expected: "  cd123456789012345678901234567890123456789012345678901234567890123456789012345\n    67890123\n",
		},
		{
			indent:   "  ",
			prefix:   "cd",
			line:     "1234567890123456789012345678901234567890123456789012345678901234567890123456 7890123",
			expected: "  cd123456789012345678901234567890123456789012345678901234567890123456789012345\n    6 7890123\n",
		},

		{
			indent:   "LD",
			prefix:   "test:",
			line:     "a2345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "LDtest:a23456789012345678901234567890123456789012345678901234567890123456789012\n       34567890123\n",
		},
		{
			indent:   "TD",
			prefix:   "test:",
			line:     "b2345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "TDtest:b23456789012345678901234567890123456789012345678901234567890123456789012\nB      34567890123\n",
		},
		{
			indent:   "B ",
			prefix:   "test:",
			line:     "c2345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "B test:c23456789012345678901234567890123456789012345678901234567890123456789012\nB      34567890123\n",
		},
		{
			indent:   "B B ",
			prefix:   "test:",
			line:     "d2345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "B B test:d234567890123456789012345678901234567890123456789012345678901234567890\nB B      1234567890123\n",
		},
		{
			indent:   "B LD",
			prefix:   "test:",
			line:     "e2345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "B LDtest:e234567890123456789012345678901234567890123456789012345678901234567890\nB        1234567890123\n",
		},
		{
			indent:   "B TD",
			prefix:   "test:",
			line:     "f2345678901234567890123456789012345678901234567890123456789012345678901234567890123",
			expected: "B TDtest:f234567890123456789012345678901234567890123456789012345678901234567890\nB B      1234567890123\n",
		},
	}

	for i, test := range tests {
		res := PrettyPrint(Twiddle(test.indent), test.prefix, test.line)
		if res != Twiddle(test.expected) {
			t.Logf("\nTest #%d:\nExp:\n%s\nGot:\n%s", i+1,
				Twiddle(test.expected), res)
			t.FailNow()
		}
	}
}

func Twiddle(in string) string {
	in = strings.ReplaceAll(in, "T", "├")
	in = strings.ReplaceAll(in, "L", "└")
	in = strings.ReplaceAll(in, "D", "─")
	in = strings.ReplaceAll(in, "B", "│")
	return in
}
